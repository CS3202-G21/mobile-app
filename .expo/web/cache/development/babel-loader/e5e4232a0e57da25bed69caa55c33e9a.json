{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/windy/dev/Sem/mobile-app/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer, DefaultTheme as NavigationDefaultTheme, DarkTheme as NavigationDarkTheme } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Provider as PaperProvider, DefaultTheme as PaperDefaultTheme, DarkTheme as PaperDarkTheme } from 'react-native-paper';\nimport DrawerContent from \"./screens/DrawerContent\";\nimport MainTabScreen from \"./screens/MainTabScreen\";\nimport OffersScreen from \"./screens/OffersScreen\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\nimport RoomsScreen from \"./screens/RoomsScreen\";\nimport FoodsScreen from \"./screens/FoodsScreen\";\nimport { AuthContext } from \"./components/context\";\nimport RootStackScreen from \"./screens/RootStackScreen\";\nimport { authStore } from \"./stores/AuthStore\";\nimport { observer } from 'mobx-react-lite';\nvar Drawer = createDrawerNavigator();\n\nvar App = function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isDarkTheme = _React$useState2[0],\n      setIsDarkTheme = _React$useState2[1];\n\n  var CustomDefaultTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDefaultTheme), PaperDefaultTheme), {}, {\n    colors: _objectSpread(_objectSpread(_objectSpread({}, NavigationDefaultTheme.colors), PaperDefaultTheme.colors), {}, {\n      background: '#ffffff',\n      text: '#333333'\n    })\n  });\n\n  var CustomDarkTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDarkTheme), PaperDarkTheme), {}, {\n    colors: _objectSpread(_objectSpread(_objectSpread({}, NavigationDarkTheme.colors), PaperDarkTheme.colors), {}, {\n      background: '#333333',\n      text: '#ffffff'\n    })\n  });\n\n  var theme = isDarkTheme ? CustomDarkTheme : CustomDefaultTheme;\n  var authContext = React.useMemo(function () {\n    return {\n      toggleTheme: function toggleTheme() {\n        setIsDarkTheme(function (isDarkTheme) {\n          return !isDarkTheme;\n        });\n      }\n    };\n  }, []);\n  return React.createElement(PaperProvider, {\n    theme: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationContainer, {\n    theme: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, authStore.isAuthenticated ? React.createElement(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return React.createElement(DrawerContent, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 41\n        }\n      }));\n    },\n    screenOptions: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"HomeDrawer\",\n    component: MainTabScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"ProfileScreen\",\n    component: ProfileScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"OffersScreen\",\n    component: OffersScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"RoomsScreen\",\n    component: RoomsScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"FoodsScreen\",\n    component: FoodsScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  })) : React.createElement(RootStackScreen, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default observer(App);","map":{"version":3,"sources":["/home/windy/dev/Sem/mobile-app/App.js"],"names":["React","useEffect","NavigationContainer","DefaultTheme","NavigationDefaultTheme","DarkTheme","NavigationDarkTheme","createDrawerNavigator","Provider","PaperProvider","PaperDefaultTheme","PaperDarkTheme","DrawerContent","MainTabScreen","OffersScreen","ProfileScreen","RoomsScreen","FoodsScreen","AuthContext","RootStackScreen","authStore","observer","Drawer","App","useState","isDarkTheme","setIsDarkTheme","CustomDefaultTheme","colors","background","text","CustomDarkTheme","theme","authContext","useMemo","toggleTheme","isAuthenticated","props","headerShown"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport {\n  NavigationContainer,\n  DefaultTheme as NavigationDefaultTheme,\n  DarkTheme as NavigationDarkTheme,\n} from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport {\n  Provider as PaperProvider,\n  DefaultTheme as PaperDefaultTheme,\n  DarkTheme as PaperDarkTheme,\n} from 'react-native-paper';\n\nimport DrawerContent from './screens/DrawerContent';\nimport MainTabScreen from './screens/MainTabScreen';\nimport OffersScreen from './screens/OffersScreen';\nimport ProfileScreen from './screens/ProfileScreen';\nimport RoomsScreen from './screens/RoomsScreen';\nimport FoodsScreen from './screens/FoodsScreen';\n\nimport { AuthContext } from './components/context';\n\nimport RootStackScreen from './screens/RootStackScreen';\nimport { authStore } from './stores/AuthStore';\nimport { observer } from 'mobx-react-lite';\n\nconst Drawer = createDrawerNavigator();\n\nconst App = () => {\n  const [isDarkTheme, setIsDarkTheme] = React.useState(false);\n\n  const CustomDefaultTheme = {\n    ...NavigationDefaultTheme,\n    ...PaperDefaultTheme,\n    colors: {\n      ...NavigationDefaultTheme.colors,\n      ...PaperDefaultTheme.colors,\n      background: '#ffffff',\n      text: '#333333',\n    },\n  };\n\n  const CustomDarkTheme = {\n    ...NavigationDarkTheme,\n    ...PaperDarkTheme,\n    colors: {\n      ...NavigationDarkTheme.colors,\n      ...PaperDarkTheme.colors,\n      background: '#333333',\n      text: '#ffffff',\n    },\n  };\n\n  const theme = isDarkTheme ? CustomDarkTheme : CustomDefaultTheme;\n\n  const authContext = React.useMemo(\n    () => ({\n      toggleTheme: () => {\n        setIsDarkTheme((isDarkTheme) => !isDarkTheme);\n      },\n    }),\n    []\n  );\n\n  // if (loginState.isLoading) {\n  //   return (\n  //     <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n  //       <ActivityIndicator size=\"large\" />\n  //     </View>\n  //   );\n  // }\n  return (\n    <PaperProvider theme={theme}>\n      <AuthContext.Provider value={authContext}>\n        <NavigationContainer theme={theme}>\n          {authStore.isAuthenticated ? (\n            <Drawer.Navigator\n              drawerContent={(props) => <DrawerContent {...props} />}\n              screenOptions={{\n                headerShown: false,\n              }}\n            >\n              <Drawer.Screen name=\"HomeDrawer\" component={MainTabScreen} />\n              <Drawer.Screen name=\"ProfileScreen\" component={ProfileScreen} />\n              <Drawer.Screen name=\"OffersScreen\" component={OffersScreen} />\n              <Drawer.Screen name=\"RoomsScreen\" component={RoomsScreen} />\n              <Drawer.Screen name=\"FoodsScreen\" component={FoodsScreen} />\n            </Drawer.Navigator>\n          ) : (\n            <RootStackScreen />\n          )}\n        </NavigationContainer>\n      </AuthContext.Provider>\n    </PaperProvider>\n  );\n};\n\nexport default observer(App);\n"]},"metadata":{},"sourceType":"module"}